<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">
    <contextName>Logback For OMP</contextName>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30"/>
    <property name="logback.appName" value="omp-web"/>
    <property name="log.dir" value="./logs/${logback.appName}.log"/>
    <springProperty scope="context" name="level" source="log.level"/>

    <!-- 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %level %logger{10} %file:%line %class %method - %msg%n</pattern>
        </encoder>
    </appender>
    <appender name="ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>./logs/${logback.appName}.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/history/%d{yyyyMMdd}/${logback.appName}.log.%d{yyyy-MM-dd}</FileNamePattern>
            <MaxHistory>${maxHistory}</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%X{logTraceId} %d{yyyy-MM-ddHH:mm:ss.SSS} %level %logger{10} %file:%line %class %method - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 日志输出级别 -->
    <root level="${level}">
        <appender-ref ref="STDOUT"/>
    </root>

</configuration>
